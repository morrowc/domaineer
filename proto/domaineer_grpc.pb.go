// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package domaineer

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// DomaineerClient is the client API for Domaineer service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type DomaineerClient interface {
	// Add a single domain to the public master's control plane.
	AddDomain(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Remove a single domain from the public master's control plane.
	RemoveDomain(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// List all domains under the control of the shadow master.
	ListDomains(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error)
}

type domaineerClient struct {
	cc grpc.ClientConnInterface
}

func NewDomaineerClient(cc grpc.ClientConnInterface) DomaineerClient {
	return &domaineerClient{cc}
}

func (c *domaineerClient) AddDomain(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/domaineer.proto.Domaineer/AddDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domaineerClient) RemoveDomain(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/domaineer.proto.Domaineer/RemoveDomain", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *domaineerClient) ListDomains(ctx context.Context, in *ListRequest, opts ...grpc.CallOption) (*ListResponse, error) {
	out := new(ListResponse)
	err := c.cc.Invoke(ctx, "/domaineer.proto.Domaineer/ListDomains", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// DomaineerServer is the server API for Domaineer service.
// All implementations must embed UnimplementedDomaineerServer
// for forward compatibility
type DomaineerServer interface {
	// Add a single domain to the public master's control plane.
	AddDomain(context.Context, *Request) (*Response, error)
	// Remove a single domain from the public master's control plane.
	RemoveDomain(context.Context, *Request) (*Response, error)
	// List all domains under the control of the shadow master.
	ListDomains(context.Context, *ListRequest) (*ListResponse, error)
	mustEmbedUnimplementedDomaineerServer()
}

// UnimplementedDomaineerServer must be embedded to have forward compatible implementations.
type UnimplementedDomaineerServer struct {
}

func (UnimplementedDomaineerServer) AddDomain(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method AddDomain not implemented")
}
func (UnimplementedDomaineerServer) RemoveDomain(context.Context, *Request) (*Response, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RemoveDomain not implemented")
}
func (UnimplementedDomaineerServer) ListDomains(context.Context, *ListRequest) (*ListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ListDomains not implemented")
}
func (UnimplementedDomaineerServer) mustEmbedUnimplementedDomaineerServer() {}

// UnsafeDomaineerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to DomaineerServer will
// result in compilation errors.
type UnsafeDomaineerServer interface {
	mustEmbedUnimplementedDomaineerServer()
}

func RegisterDomaineerServer(s grpc.ServiceRegistrar, srv DomaineerServer) {
	s.RegisterService(&Domaineer_ServiceDesc, srv)
}

func _Domaineer_AddDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomaineerServer).AddDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domaineer.proto.Domaineer/AddDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomaineerServer).AddDomain(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domaineer_RemoveDomain_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomaineerServer).RemoveDomain(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domaineer.proto.Domaineer/RemoveDomain",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomaineerServer).RemoveDomain(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Domaineer_ListDomains_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(DomaineerServer).ListDomains(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/domaineer.proto.Domaineer/ListDomains",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(DomaineerServer).ListDomains(ctx, req.(*ListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// Domaineer_ServiceDesc is the grpc.ServiceDesc for Domaineer service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var Domaineer_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "domaineer.proto.Domaineer",
	HandlerType: (*DomaineerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "AddDomain",
			Handler:    _Domaineer_AddDomain_Handler,
		},
		{
			MethodName: "RemoveDomain",
			Handler:    _Domaineer_RemoveDomain_Handler,
		},
		{
			MethodName: "ListDomains",
			Handler:    _Domaineer_ListDomains_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "domaineer.proto",
}
